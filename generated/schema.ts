// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Protocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Protocol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Protocol", id.toString(), this);
  }

  static load(id: string): Protocol | null {
    return store.get("Protocol", id) as Protocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get revenueUSD(): BigDecimal {
    let value = this.get("revenueUSD");
    return value.toBigDecimal();
  }

  set revenueUSD(value: BigDecimal) {
    this.set("revenueUSD", Value.fromBigDecimal(value));
  }

  get days(): Array<string> | null {
    let value = this.get("days");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set days(value: Array<string> | null) {
    if (value === null) {
      this.unset("days");
    } else {
      this.set("days", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Day entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Day entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Day", id.toString(), this);
  }

  static load(id: string): Day | null {
    return store.get("Day", id) as Day | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get revenueUSD(): BigDecimal {
    let value = this.get("revenueUSD");
    return value.toBigDecimal();
  }

  set revenueUSD(value: BigDecimal) {
    this.set("revenueUSD", Value.fromBigDecimal(value));
  }
}
