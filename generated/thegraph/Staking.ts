// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllocationClosed extends ethereum.Event {
  get params(): AllocationClosed__Params {
    return new AllocationClosed__Params(this);
  }
}

export class AllocationClosed__Params {
  _event: AllocationClosed;

  constructor(event: AllocationClosed) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get allocationID(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get effectiveAllocation(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get poi(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get isDelegator(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class AllocationCollected extends ethereum.Event {
  get params(): AllocationCollected__Params {
    return new AllocationCollected__Params(this);
  }
}

export class AllocationCollected__Params {
  _event: AllocationCollected;

  constructor(event: AllocationCollected) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get allocationID(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get curationFees(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get rebateFees(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class AllocationCreated extends ethereum.Event {
  get params(): AllocationCreated__Params {
    return new AllocationCreated__Params(this);
  }
}

export class AllocationCreated__Params {
  _event: AllocationCreated;

  constructor(event: AllocationCreated) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get allocationID(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get metadata(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class AssetHolderUpdate extends ethereum.Event {
  get params(): AssetHolderUpdate__Params {
    return new AssetHolderUpdate__Params(this);
  }
}

export class AssetHolderUpdate__Params {
  _event: AssetHolderUpdate;

  constructor(event: AssetHolderUpdate) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DelegationParametersUpdated extends ethereum.Event {
  get params(): DelegationParametersUpdated__Params {
    return new DelegationParametersUpdated__Params(this);
  }
}

export class DelegationParametersUpdated__Params {
  _event: DelegationParametersUpdated;

  constructor(event: DelegationParametersUpdated) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indexingRewardCut(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get queryFeeCut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cooldownBlocks(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ParameterUpdated extends ethereum.Event {
  get params(): ParameterUpdated__Params {
    return new ParameterUpdated__Params(this);
  }
}

export class ParameterUpdated__Params {
  _event: ParameterUpdated;

  constructor(event: ParameterUpdated) {
    this._event = event;
  }

  get param(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RebateClaimed extends ethereum.Event {
  get params(): RebateClaimed__Params {
    return new RebateClaimed__Params(this);
  }
}

export class RebateClaimed__Params {
  _event: RebateClaimed;

  constructor(event: RebateClaimed) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get allocationID(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get forEpoch(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get unclaimedAllocationsCount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get delegationFees(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetOperator extends ethereum.Event {
  get params(): SetOperator__Params {
    return new SetOperator__Params(this);
  }
}

export class SetOperator__Params {
  _event: SetOperator;

  constructor(event: SetOperator) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SlasherUpdate extends ethereum.Event {
  get params(): SlasherUpdate__Params {
    return new SlasherUpdate__Params(this);
  }
}

export class SlasherUpdate__Params {
  _event: SlasherUpdate;

  constructor(event: SlasherUpdate) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get slasher(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class StakeDelegated extends ethereum.Event {
  get params(): StakeDelegated__Params {
    return new StakeDelegated__Params(this);
  }
}

export class StakeDelegated__Params {
  _event: StakeDelegated;

  constructor(event: StakeDelegated) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakeDelegatedLocked extends ethereum.Event {
  get params(): StakeDelegatedLocked__Params {
    return new StakeDelegatedLocked__Params(this);
  }
}

export class StakeDelegatedLocked__Params {
  _event: StakeDelegatedLocked;

  constructor(event: StakeDelegatedLocked) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get until(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakeDelegatedWithdrawn extends ethereum.Event {
  get params(): StakeDelegatedWithdrawn__Params {
    return new StakeDelegatedWithdrawn__Params(this);
  }
}

export class StakeDelegatedWithdrawn__Params {
  _event: StakeDelegatedWithdrawn;

  constructor(event: StakeDelegatedWithdrawn) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeDeposited extends ethereum.Event {
  get params(): StakeDeposited__Params {
    return new StakeDeposited__Params(this);
  }
}

export class StakeDeposited__Params {
  _event: StakeDeposited;

  constructor(event: StakeDeposited) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeLocked extends ethereum.Event {
  get params(): StakeLocked__Params {
    return new StakeLocked__Params(this);
  }
}

export class StakeLocked__Params {
  _event: StakeLocked;

  constructor(event: StakeLocked) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get until(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeSlashed extends ethereum.Event {
  get params(): StakeSlashed__Params {
    return new StakeSlashed__Params(this);
  }
}

export class StakeSlashed__Params {
  _event: StakeSlashed;

  constructor(event: StakeSlashed) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class StakeWithdrawn extends ethereum.Event {
  get params(): StakeWithdrawn__Params {
    return new StakeWithdrawn__Params(this);
  }
}

export class StakeWithdrawn__Params {
  _event: StakeWithdrawn;

  constructor(event: StakeWithdrawn) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staking__allocationsResult {
  value0: Address;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Staking__delegationPoolsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Staking__getAllocationResultValue0Struct extends ethereum.Tuple {
  get indexer(): Address {
    return this[0].toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this[1].toBytes();
  }

  get tokens(): BigInt {
    return this[2].toBigInt();
  }

  get createdAtEpoch(): BigInt {
    return this[3].toBigInt();
  }

  get closedAtEpoch(): BigInt {
    return this[4].toBigInt();
  }

  get collectedFees(): BigInt {
    return this[5].toBigInt();
  }

  get effectiveAllocation(): BigInt {
    return this[6].toBigInt();
  }

  get accRewardsPerAllocatedToken(): BigInt {
    return this[7].toBigInt();
  }
}

export class Staking__getDelegationResultValue0Struct extends ethereum.Tuple {
  get shares(): BigInt {
    return this[0].toBigInt();
  }

  get tokensLocked(): BigInt {
    return this[1].toBigInt();
  }

  get tokensLockedUntil(): BigInt {
    return this[2].toBigInt();
  }
}

export class Staking__getWithdraweableDelegatedTokensInput_delegationStruct extends ethereum.Tuple {
  get shares(): BigInt {
    return this[0].toBigInt();
  }

  get tokensLocked(): BigInt {
    return this[1].toBigInt();
  }

  get tokensLockedUntil(): BigInt {
    return this[2].toBigInt();
  }
}

export class Staking__rebatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Staking__stakesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Staking extends ethereum.SmartContract {
  static bind(address: Address): Staking {
    return new Staking("Staking", address);
  }

  addressCache(param0: Bytes): Address {
    let result = super.call("addressCache", "addressCache(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_addressCache(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressCache",
      "addressCache(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allocations(param0: Address): Staking__allocationsResult {
    let result = super.call(
      "allocations",
      "allocations(address):(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Staking__allocationsResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_allocations(
    param0: Address
  ): ethereum.CallResult<Staking__allocationsResult> {
    let result = super.tryCall(
      "allocations",
      "allocations(address):(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staking__allocationsResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  alphaDenominator(): BigInt {
    let result = super.call(
      "alphaDenominator",
      "alphaDenominator():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_alphaDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "alphaDenominator",
      "alphaDenominator():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alphaNumerator(): BigInt {
    let result = super.call("alphaNumerator", "alphaNumerator():(uint32)", []);

    return result[0].toBigInt();
  }

  try_alphaNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "alphaNumerator",
      "alphaNumerator():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetHolders(param0: Address): boolean {
    let result = super.call("assetHolders", "assetHolders(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_assetHolders(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("assetHolders", "assetHolders(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  channelDisputeEpochs(): BigInt {
    let result = super.call(
      "channelDisputeEpochs",
      "channelDisputeEpochs():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_channelDisputeEpochs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "channelDisputeEpochs",
      "channelDisputeEpochs():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curationPercentage(): BigInt {
    let result = super.call(
      "curationPercentage",
      "curationPercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_curationPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "curationPercentage",
      "curationPercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegate(_indexer: Address, _tokens: BigInt): BigInt {
    let result = super.call("delegate", "delegate(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_indexer),
      ethereum.Value.fromUnsignedBigInt(_tokens)
    ]);

    return result[0].toBigInt();
  }

  try_delegate(
    _indexer: Address,
    _tokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegate",
      "delegate(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromUnsignedBigInt(_tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegationParametersCooldown(): BigInt {
    let result = super.call(
      "delegationParametersCooldown",
      "delegationParametersCooldown():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegationParametersCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegationParametersCooldown",
      "delegationParametersCooldown():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegationPools(param0: Address): Staking__delegationPoolsResult {
    let result = super.call(
      "delegationPools",
      "delegationPools(address):(uint32,uint32,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Staking__delegationPoolsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_delegationPools(
    param0: Address
  ): ethereum.CallResult<Staking__delegationPoolsResult> {
    let result = super.tryCall(
      "delegationPools",
      "delegationPools(address):(uint32,uint32,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staking__delegationPoolsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  delegationRatio(): BigInt {
    let result = super.call(
      "delegationRatio",
      "delegationRatio():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegationRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegationRatio",
      "delegationRatio():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegationTaxPercentage(): BigInt {
    let result = super.call(
      "delegationTaxPercentage",
      "delegationTaxPercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegationTaxPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegationTaxPercentage",
      "delegationTaxPercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegationUnbondingPeriod(): BigInt {
    let result = super.call(
      "delegationUnbondingPeriod",
      "delegationUnbondingPeriod():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_delegationUnbondingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegationUnbondingPeriod",
      "delegationUnbondingPeriod():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllocation(
    _allocationID: Address
  ): Staking__getAllocationResultValue0Struct {
    let result = super.call(
      "getAllocation",
      "getAllocation(address):((address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_allocationID)]
    );

    return result[0].toTuple() as Staking__getAllocationResultValue0Struct;
  }

  try_getAllocation(
    _allocationID: Address
  ): ethereum.CallResult<Staking__getAllocationResultValue0Struct> {
    let result = super.tryCall(
      "getAllocation",
      "getAllocation(address):((address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_allocationID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Staking__getAllocationResultValue0Struct
    );
  }

  getAllocationState(_allocationID: Address): i32 {
    let result = super.call(
      "getAllocationState",
      "getAllocationState(address):(uint8)",
      [ethereum.Value.fromAddress(_allocationID)]
    );

    return result[0].toI32();
  }

  try_getAllocationState(_allocationID: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAllocationState",
      "getAllocationState(address):(uint8)",
      [ethereum.Value.fromAddress(_allocationID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDelegation(
    _indexer: Address,
    _delegator: Address
  ): Staking__getDelegationResultValue0Struct {
    let result = super.call(
      "getDelegation",
      "getDelegation(address,address):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromAddress(_delegator)
      ]
    );

    return result[0].toTuple() as Staking__getDelegationResultValue0Struct;
  }

  try_getDelegation(
    _indexer: Address,
    _delegator: Address
  ): ethereum.CallResult<Staking__getDelegationResultValue0Struct> {
    let result = super.tryCall(
      "getDelegation",
      "getDelegation(address,address):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromAddress(_delegator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Staking__getDelegationResultValue0Struct
    );
  }

  getIndexerCapacity(_indexer: Address): BigInt {
    let result = super.call(
      "getIndexerCapacity",
      "getIndexerCapacity(address):(uint256)",
      [ethereum.Value.fromAddress(_indexer)]
    );

    return result[0].toBigInt();
  }

  try_getIndexerCapacity(_indexer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexerCapacity",
      "getIndexerCapacity(address):(uint256)",
      [ethereum.Value.fromAddress(_indexer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIndexerStakedTokens(_indexer: Address): BigInt {
    let result = super.call(
      "getIndexerStakedTokens",
      "getIndexerStakedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_indexer)]
    );

    return result[0].toBigInt();
  }

  try_getIndexerStakedTokens(_indexer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexerStakedTokens",
      "getIndexerStakedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_indexer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubgraphAllocatedTokens(_subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "getSubgraphAllocatedTokens",
      "getSubgraphAllocatedTokens(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return result[0].toBigInt();
  }

  try_getSubgraphAllocatedTokens(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSubgraphAllocatedTokens",
      "getSubgraphAllocatedTokens(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdraweableDelegatedTokens(
    _delegation: Staking__getWithdraweableDelegatedTokensInput_delegationStruct
  ): BigInt {
    let result = super.call(
      "getWithdraweableDelegatedTokens",
      "getWithdraweableDelegatedTokens((uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_delegation)]
    );

    return result[0].toBigInt();
  }

  try_getWithdraweableDelegatedTokens(
    _delegation: Staking__getWithdraweableDelegatedTokensInput_delegationStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdraweableDelegatedTokens",
      "getWithdraweableDelegatedTokens((uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_delegation)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasStake(_indexer: Address): boolean {
    let result = super.call("hasStake", "hasStake(address):(bool)", [
      ethereum.Value.fromAddress(_indexer)
    ]);

    return result[0].toBoolean();
  }

  try_hasStake(_indexer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasStake", "hasStake(address):(bool)", [
      ethereum.Value.fromAddress(_indexer)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAllocation(_allocationID: Address): boolean {
    let result = super.call("isAllocation", "isAllocation(address):(bool)", [
      ethereum.Value.fromAddress(_allocationID)
    ]);

    return result[0].toBoolean();
  }

  try_isAllocation(_allocationID: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAllocation", "isAllocation(address):(bool)", [
      ethereum.Value.fromAddress(_allocationID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDelegator(_indexer: Address, _delegator: Address): boolean {
    let result = super.call(
      "isDelegator",
      "isDelegator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromAddress(_delegator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDelegator(
    _indexer: Address,
    _delegator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDelegator",
      "isDelegator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromAddress(_delegator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(_operator: Address, _indexer: Address): boolean {
    let result = super.call(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_indexer)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperator(
    _operator: Address,
    _indexer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_indexer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxAllocationEpochs(): BigInt {
    let result = super.call(
      "maxAllocationEpochs",
      "maxAllocationEpochs():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxAllocationEpochs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxAllocationEpochs",
      "maxAllocationEpochs():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumIndexerStake(): BigInt {
    let result = super.call(
      "minimumIndexerStake",
      "minimumIndexerStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumIndexerStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumIndexerStake",
      "minimumIndexerStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operatorAuth(param0: Address, param1: Address): boolean {
    let result = super.call(
      "operatorAuth",
      "operatorAuth(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_operatorAuth(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "operatorAuth",
      "operatorAuth(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolPercentage(): BigInt {
    let result = super.call(
      "protocolPercentage",
      "protocolPercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolPercentage",
      "protocolPercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebates(param0: BigInt): Staking__rebatesResult {
    let result = super.call(
      "rebates",
      "rebates(uint256):(uint256,uint256,uint256,uint32,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Staking__rebatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_rebates(param0: BigInt): ethereum.CallResult<Staking__rebatesResult> {
    let result = super.tryCall(
      "rebates",
      "rebates(uint256):(uint256,uint256,uint256,uint32,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staking__rebatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  slashers(param0: Address): boolean {
    let result = super.call("slashers", "slashers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_slashers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("slashers", "slashers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakes(param0: Address): Staking__stakesResult {
    let result = super.call(
      "stakes",
      "stakes(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Staking__stakesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_stakes(param0: Address): ethereum.CallResult<Staking__stakesResult> {
    let result = super.tryCall(
      "stakes",
      "stakes(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staking__stakesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  subgraphAllocations(param0: Bytes): BigInt {
    let result = super.call(
      "subgraphAllocations",
      "subgraphAllocations(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_subgraphAllocations(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subgraphAllocations",
      "subgraphAllocations(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  thawingPeriod(): BigInt {
    let result = super.call("thawingPeriod", "thawingPeriod():(uint32)", []);

    return result[0].toBigInt();
  }

  try_thawingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("thawingPeriod", "thawingPeriod():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  undelegate(_indexer: Address, _shares: BigInt): BigInt {
    let result = super.call(
      "undelegate",
      "undelegate(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromUnsignedBigInt(_shares)
      ]
    );

    return result[0].toBigInt();
  }

  try_undelegate(
    _indexer: Address,
    _shares: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "undelegate",
      "undelegate(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromUnsignedBigInt(_shares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawDelegated(_indexer: Address, _delegateToIndexer: Address): BigInt {
    let result = super.call(
      "withdrawDelegated",
      "withdrawDelegated(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromAddress(_delegateToIndexer)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawDelegated(
    _indexer: Address,
    _delegateToIndexer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawDelegated",
      "withdrawDelegated(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_indexer),
        ethereum.Value.fromAddress(_delegateToIndexer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptProxyCall extends ethereum.Call {
  get inputs(): AcceptProxyCall__Inputs {
    return new AcceptProxyCall__Inputs(this);
  }

  get outputs(): AcceptProxyCall__Outputs {
    return new AcceptProxyCall__Outputs(this);
  }
}

export class AcceptProxyCall__Inputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptProxyCall__Outputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }
}

export class AcceptProxyAndCallCall extends ethereum.Call {
  get inputs(): AcceptProxyAndCallCall__Inputs {
    return new AcceptProxyAndCallCall__Inputs(this);
  }

  get outputs(): AcceptProxyAndCallCall__Outputs {
    return new AcceptProxyAndCallCall__Outputs(this);
  }
}

export class AcceptProxyAndCallCall__Inputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AcceptProxyAndCallCall__Outputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }
}

export class AllocateCall extends ethereum.Call {
  get inputs(): AllocateCall__Inputs {
    return new AllocateCall__Inputs(this);
  }

  get outputs(): AllocateCall__Outputs {
    return new AllocateCall__Outputs(this);
  }
}

export class AllocateCall__Inputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _allocationID(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AllocateCall__Outputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }
}

export class AllocateFromCall extends ethereum.Call {
  get inputs(): AllocateFromCall__Inputs {
    return new AllocateFromCall__Inputs(this);
  }

  get outputs(): AllocateFromCall__Outputs {
    return new AllocateFromCall__Outputs(this);
  }
}

export class AllocateFromCall__Inputs {
  _call: AllocateFromCall;

  constructor(call: AllocateFromCall) {
    this._call = call;
  }

  get _indexer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _allocationID(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AllocateFromCall__Outputs {
  _call: AllocateFromCall;

  constructor(call: AllocateFromCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _allocationID(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _restake(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimManyCall extends ethereum.Call {
  get inputs(): ClaimManyCall__Inputs {
    return new ClaimManyCall__Inputs(this);
  }

  get outputs(): ClaimManyCall__Outputs {
    return new ClaimManyCall__Outputs(this);
  }
}

export class ClaimManyCall__Inputs {
  _call: ClaimManyCall;

  constructor(call: ClaimManyCall) {
    this._call = call;
  }

  get _allocationID(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _restake(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ClaimManyCall__Outputs {
  _call: ClaimManyCall;

  constructor(call: ClaimManyCall) {
    this._call = call;
  }
}

export class CloseAllocationCall extends ethereum.Call {
  get inputs(): CloseAllocationCall__Inputs {
    return new CloseAllocationCall__Inputs(this);
  }

  get outputs(): CloseAllocationCall__Outputs {
    return new CloseAllocationCall__Outputs(this);
  }
}

export class CloseAllocationCall__Inputs {
  _call: CloseAllocationCall;

  constructor(call: CloseAllocationCall) {
    this._call = call;
  }

  get _allocationID(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _poi(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CloseAllocationCall__Outputs {
  _call: CloseAllocationCall;

  constructor(call: CloseAllocationCall) {
    this._call = call;
  }
}

export class CloseAllocationManyCall extends ethereum.Call {
  get inputs(): CloseAllocationManyCall__Inputs {
    return new CloseAllocationManyCall__Inputs(this);
  }

  get outputs(): CloseAllocationManyCall__Outputs {
    return new CloseAllocationManyCall__Outputs(this);
  }
}

export class CloseAllocationManyCall__Inputs {
  _call: CloseAllocationManyCall;

  constructor(call: CloseAllocationManyCall) {
    this._call = call;
  }

  get _requests(): Array<CloseAllocationManyCall_requestsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CloseAllocationManyCall_requestsStruct
    >();
  }
}

export class CloseAllocationManyCall__Outputs {
  _call: CloseAllocationManyCall;

  constructor(call: CloseAllocationManyCall) {
    this._call = call;
  }
}

export class CloseAllocationManyCall_requestsStruct extends ethereum.Tuple {
  get allocationID(): Address {
    return this[0].toAddress();
  }

  get poi(): Bytes {
    return this[1].toBytes();
  }
}

export class CloseAndAllocateCall extends ethereum.Call {
  get inputs(): CloseAndAllocateCall__Inputs {
    return new CloseAndAllocateCall__Inputs(this);
  }

  get outputs(): CloseAndAllocateCall__Outputs {
    return new CloseAndAllocateCall__Outputs(this);
  }
}

export class CloseAndAllocateCall__Inputs {
  _call: CloseAndAllocateCall;

  constructor(call: CloseAndAllocateCall) {
    this._call = call;
  }

  get _closingAllocationID(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _poi(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _indexer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _allocationID(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class CloseAndAllocateCall__Outputs {
  _call: CloseAndAllocateCall;

  constructor(call: CloseAndAllocateCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get _tokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocationID(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get _indexer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minimumIndexerStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _thawingPeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _protocolPercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _curationPercentage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _channelDisputeEpochs(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxAllocationEpochs(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _delegationUnbondingPeriod(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _delegationRatio(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _rebateAlphaNumerator(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _rebateAlphaDenominator(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetAssetHolderCall extends ethereum.Call {
  get inputs(): SetAssetHolderCall__Inputs {
    return new SetAssetHolderCall__Inputs(this);
  }

  get outputs(): SetAssetHolderCall__Outputs {
    return new SetAssetHolderCall__Outputs(this);
  }
}

export class SetAssetHolderCall__Inputs {
  _call: SetAssetHolderCall;

  constructor(call: SetAssetHolderCall) {
    this._call = call;
  }

  get _assetHolder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAssetHolderCall__Outputs {
  _call: SetAssetHolderCall;

  constructor(call: SetAssetHolderCall) {
    this._call = call;
  }
}

export class SetChannelDisputeEpochsCall extends ethereum.Call {
  get inputs(): SetChannelDisputeEpochsCall__Inputs {
    return new SetChannelDisputeEpochsCall__Inputs(this);
  }

  get outputs(): SetChannelDisputeEpochsCall__Outputs {
    return new SetChannelDisputeEpochsCall__Outputs(this);
  }
}

export class SetChannelDisputeEpochsCall__Inputs {
  _call: SetChannelDisputeEpochsCall;

  constructor(call: SetChannelDisputeEpochsCall) {
    this._call = call;
  }

  get _channelDisputeEpochs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetChannelDisputeEpochsCall__Outputs {
  _call: SetChannelDisputeEpochsCall;

  constructor(call: SetChannelDisputeEpochsCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetCurationPercentageCall extends ethereum.Call {
  get inputs(): SetCurationPercentageCall__Inputs {
    return new SetCurationPercentageCall__Inputs(this);
  }

  get outputs(): SetCurationPercentageCall__Outputs {
    return new SetCurationPercentageCall__Outputs(this);
  }
}

export class SetCurationPercentageCall__Inputs {
  _call: SetCurationPercentageCall;

  constructor(call: SetCurationPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurationPercentageCall__Outputs {
  _call: SetCurationPercentageCall;

  constructor(call: SetCurationPercentageCall) {
    this._call = call;
  }
}

export class SetDelegationParametersCall extends ethereum.Call {
  get inputs(): SetDelegationParametersCall__Inputs {
    return new SetDelegationParametersCall__Inputs(this);
  }

  get outputs(): SetDelegationParametersCall__Outputs {
    return new SetDelegationParametersCall__Outputs(this);
  }
}

export class SetDelegationParametersCall__Inputs {
  _call: SetDelegationParametersCall;

  constructor(call: SetDelegationParametersCall) {
    this._call = call;
  }

  get _indexingRewardCut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _queryFeeCut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _cooldownBlocks(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDelegationParametersCall__Outputs {
  _call: SetDelegationParametersCall;

  constructor(call: SetDelegationParametersCall) {
    this._call = call;
  }
}

export class SetDelegationParametersCooldownCall extends ethereum.Call {
  get inputs(): SetDelegationParametersCooldownCall__Inputs {
    return new SetDelegationParametersCooldownCall__Inputs(this);
  }

  get outputs(): SetDelegationParametersCooldownCall__Outputs {
    return new SetDelegationParametersCooldownCall__Outputs(this);
  }
}

export class SetDelegationParametersCooldownCall__Inputs {
  _call: SetDelegationParametersCooldownCall;

  constructor(call: SetDelegationParametersCooldownCall) {
    this._call = call;
  }

  get _blocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelegationParametersCooldownCall__Outputs {
  _call: SetDelegationParametersCooldownCall;

  constructor(call: SetDelegationParametersCooldownCall) {
    this._call = call;
  }
}

export class SetDelegationRatioCall extends ethereum.Call {
  get inputs(): SetDelegationRatioCall__Inputs {
    return new SetDelegationRatioCall__Inputs(this);
  }

  get outputs(): SetDelegationRatioCall__Outputs {
    return new SetDelegationRatioCall__Outputs(this);
  }
}

export class SetDelegationRatioCall__Inputs {
  _call: SetDelegationRatioCall;

  constructor(call: SetDelegationRatioCall) {
    this._call = call;
  }

  get _delegationRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelegationRatioCall__Outputs {
  _call: SetDelegationRatioCall;

  constructor(call: SetDelegationRatioCall) {
    this._call = call;
  }
}

export class SetDelegationTaxPercentageCall extends ethereum.Call {
  get inputs(): SetDelegationTaxPercentageCall__Inputs {
    return new SetDelegationTaxPercentageCall__Inputs(this);
  }

  get outputs(): SetDelegationTaxPercentageCall__Outputs {
    return new SetDelegationTaxPercentageCall__Outputs(this);
  }
}

export class SetDelegationTaxPercentageCall__Inputs {
  _call: SetDelegationTaxPercentageCall;

  constructor(call: SetDelegationTaxPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelegationTaxPercentageCall__Outputs {
  _call: SetDelegationTaxPercentageCall;

  constructor(call: SetDelegationTaxPercentageCall) {
    this._call = call;
  }
}

export class SetDelegationUnbondingPeriodCall extends ethereum.Call {
  get inputs(): SetDelegationUnbondingPeriodCall__Inputs {
    return new SetDelegationUnbondingPeriodCall__Inputs(this);
  }

  get outputs(): SetDelegationUnbondingPeriodCall__Outputs {
    return new SetDelegationUnbondingPeriodCall__Outputs(this);
  }
}

export class SetDelegationUnbondingPeriodCall__Inputs {
  _call: SetDelegationUnbondingPeriodCall;

  constructor(call: SetDelegationUnbondingPeriodCall) {
    this._call = call;
  }

  get _delegationUnbondingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelegationUnbondingPeriodCall__Outputs {
  _call: SetDelegationUnbondingPeriodCall;

  constructor(call: SetDelegationUnbondingPeriodCall) {
    this._call = call;
  }
}

export class SetMaxAllocationEpochsCall extends ethereum.Call {
  get inputs(): SetMaxAllocationEpochsCall__Inputs {
    return new SetMaxAllocationEpochsCall__Inputs(this);
  }

  get outputs(): SetMaxAllocationEpochsCall__Outputs {
    return new SetMaxAllocationEpochsCall__Outputs(this);
  }
}

export class SetMaxAllocationEpochsCall__Inputs {
  _call: SetMaxAllocationEpochsCall;

  constructor(call: SetMaxAllocationEpochsCall) {
    this._call = call;
  }

  get _maxAllocationEpochs(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxAllocationEpochsCall__Outputs {
  _call: SetMaxAllocationEpochsCall;

  constructor(call: SetMaxAllocationEpochsCall) {
    this._call = call;
  }
}

export class SetMinimumIndexerStakeCall extends ethereum.Call {
  get inputs(): SetMinimumIndexerStakeCall__Inputs {
    return new SetMinimumIndexerStakeCall__Inputs(this);
  }

  get outputs(): SetMinimumIndexerStakeCall__Outputs {
    return new SetMinimumIndexerStakeCall__Outputs(this);
  }
}

export class SetMinimumIndexerStakeCall__Inputs {
  _call: SetMinimumIndexerStakeCall;

  constructor(call: SetMinimumIndexerStakeCall) {
    this._call = call;
  }

  get _minimumIndexerStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumIndexerStakeCall__Outputs {
  _call: SetMinimumIndexerStakeCall;

  constructor(call: SetMinimumIndexerStakeCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetProtocolPercentageCall extends ethereum.Call {
  get inputs(): SetProtocolPercentageCall__Inputs {
    return new SetProtocolPercentageCall__Inputs(this);
  }

  get outputs(): SetProtocolPercentageCall__Outputs {
    return new SetProtocolPercentageCall__Outputs(this);
  }
}

export class SetProtocolPercentageCall__Inputs {
  _call: SetProtocolPercentageCall;

  constructor(call: SetProtocolPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolPercentageCall__Outputs {
  _call: SetProtocolPercentageCall;

  constructor(call: SetProtocolPercentageCall) {
    this._call = call;
  }
}

export class SetRebateRatioCall extends ethereum.Call {
  get inputs(): SetRebateRatioCall__Inputs {
    return new SetRebateRatioCall__Inputs(this);
  }

  get outputs(): SetRebateRatioCall__Outputs {
    return new SetRebateRatioCall__Outputs(this);
  }
}

export class SetRebateRatioCall__Inputs {
  _call: SetRebateRatioCall;

  constructor(call: SetRebateRatioCall) {
    this._call = call;
  }

  get _alphaNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _alphaDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRebateRatioCall__Outputs {
  _call: SetRebateRatioCall;

  constructor(call: SetRebateRatioCall) {
    this._call = call;
  }
}

export class SetSlasherCall extends ethereum.Call {
  get inputs(): SetSlasherCall__Inputs {
    return new SetSlasherCall__Inputs(this);
  }

  get outputs(): SetSlasherCall__Outputs {
    return new SetSlasherCall__Outputs(this);
  }
}

export class SetSlasherCall__Inputs {
  _call: SetSlasherCall;

  constructor(call: SetSlasherCall) {
    this._call = call;
  }

  get _slasher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSlasherCall__Outputs {
  _call: SetSlasherCall;

  constructor(call: SetSlasherCall) {
    this._call = call;
  }
}

export class SetThawingPeriodCall extends ethereum.Call {
  get inputs(): SetThawingPeriodCall__Inputs {
    return new SetThawingPeriodCall__Inputs(this);
  }

  get outputs(): SetThawingPeriodCall__Outputs {
    return new SetThawingPeriodCall__Outputs(this);
  }
}

export class SetThawingPeriodCall__Inputs {
  _call: SetThawingPeriodCall;

  constructor(call: SetThawingPeriodCall) {
    this._call = call;
  }

  get _thawingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetThawingPeriodCall__Outputs {
  _call: SetThawingPeriodCall;

  constructor(call: SetThawingPeriodCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get _indexer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _reward(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _tokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeToCall extends ethereum.Call {
  get inputs(): StakeToCall__Inputs {
    return new StakeToCall__Inputs(this);
  }

  get outputs(): StakeToCall__Outputs {
    return new StakeToCall__Outputs(this);
  }
}

export class StakeToCall__Inputs {
  _call: StakeToCall;

  constructor(call: StakeToCall) {
    this._call = call;
  }

  get _indexer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeToCall__Outputs {
  _call: StakeToCall;

  constructor(call: StakeToCall) {
    this._call = call;
  }
}

export class UndelegateCall extends ethereum.Call {
  get inputs(): UndelegateCall__Inputs {
    return new UndelegateCall__Inputs(this);
  }

  get outputs(): UndelegateCall__Outputs {
    return new UndelegateCall__Outputs(this);
  }
}

export class UndelegateCall__Inputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get _indexer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UndelegateCall__Outputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _tokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawDelegatedCall extends ethereum.Call {
  get inputs(): WithdrawDelegatedCall__Inputs {
    return new WithdrawDelegatedCall__Inputs(this);
  }

  get outputs(): WithdrawDelegatedCall__Outputs {
    return new WithdrawDelegatedCall__Outputs(this);
  }
}

export class WithdrawDelegatedCall__Inputs {
  _call: WithdrawDelegatedCall;

  constructor(call: WithdrawDelegatedCall) {
    this._call = call;
  }

  get _indexer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _delegateToIndexer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawDelegatedCall__Outputs {
  _call: WithdrawDelegatedCall;

  constructor(call: WithdrawDelegatedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
